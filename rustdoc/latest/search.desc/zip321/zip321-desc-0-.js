searchState.loadedDescShard("zip321", 0, "Reference implementation of the ZIP-321 standard for …\nParsing encountered a duplicate ZIP 321 URI parameter for …\nA memo field in the ZIP 321 URI was not properly base-64 …\nA memo value exceeded 512 bytes in length or could not be …\nThe ZIP 321 URI was malformed and failed to parse.\nA single payment being requested.\nThe payment at the wrapped index did not include a …\nThe ZIP 321 request included more payments than can be …\nA ZIP321 transaction request.\nThe payment at the wrapped index attempted to include a …\nErrors that may be produced in decoding of payment …\nReturns the value of the payment that is being requested, …\nConstructs a new empty transaction request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new transaction request from the provided map …\nParse the provided URI to a payment request value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA human-readable label for this payment within the larger …\nReturns the memo that, if included, must be provided with …\nParse a <code>MemoBytes</code> value from a ZIP 321 compatible …\nConverts a <code>MemoBytes</code> value to a ZIP 321 compatible …\nA human-readable message to be displayed to the user …\nConstructs a new <code>Payment</code> from its constituent parts.\nConstructs a new transaction request that obeys the …\nA list of other arbitrary key/value pairs associated with …\nReturns the map of payments that make up this request.\nReturns the payment address to which the payment should be …\nConvert this request to a URI string.\nReturns the total value of payments to be made.\nConstructs a new <code>Payment</code> paying the given address the …")