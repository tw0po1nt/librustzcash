searchState.loadedDescShard("zcash_encoding", 0, "<em>Zcash binary encodings.</em>\nNamespace for functions that perform encoding of array …\nNamespace for functions for compact encoding of integers.\nThe maximum allowed value representable as a <code>[CompactSize]</code>\nNamespace for functions that perform encoding of <code>Option</code> …\nNamespace for functions that perform encoding of vectors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads an integer encoded in compact form.\nReads a vector, assuming the encoding written by …\nReads <code>count</code> elements from a stream into a vector, assuming …\nReads an optional value, assuming the encoding written by …\nReads a CompactSize-prefixed series of elements into a …\nReads <code>count</code> elements into a collection, assuming the …\nReads a CompactSize-prefixed series of elements into a …\nReads <code>count</code> elements into a collection, assuming the …\nReads an integer encoded in contact form and performs …\nReturns the number of bytes needed to encode the given …\nReturns the serialized size of a vector of <code>u8</code> as written …\nWrites the provided <code>usize</code> value to the provided Writer in …\nWrites a slice of values by writing <code>CompactSize</code>-encoded …\nWrites an iterator full of values to a stream by …\nWrites an optional value to a stream by writing a flag …\nWrites a NonEmpty container of values to the stream using …\nWrites an iterator of values by writing <code>CompactSize</code>…")